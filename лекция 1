Тема 1. ВВЕДЕНИЕ В POSTGRESQL
Основные концепции: БД, СУБД
База данных (БД) - это структурированное собрание данных, организованных для эффективного хранения, управления и доступа.

Система управления базами данных (СУБД) - это программное обеспечение, которое обеспечивает управление и взаимодействие с базами данных. Оно предоставляет средства для создания, изменения и извлечения данных из БД.

Реляционная модель и SQL
Реляционная модель - это структура организации данных, где информация хранится в виде таблиц (реляций) с отношениями между ними.

SQL (Structured Query Language) - это язык запросов, используемый для взаимодействия с реляционными базами данных. Он позволяет выполнять операции, такие как SELECT, INSERT, UPDATE и DELETE.

Почему стоит выбрать PostgreSQL в качестве СУБД?
Открытое ПО: PostgreSQL является open source СУБД с богатой историей разработки и активным сообществом.

Мощные функциональные возможности: PostgreSQL поддерживает множество продвинутых функций, включая геопространственные данные, JSON, индексы и многое другое.

Высокая надежность и производительность: PostgreSQL известен своей стабильностью и возможностью обработки больших объемов данных.

Обзор типов данных в PostgreSQL
PostgreSQL поддерживает разнообразные типы данных, которые можно использовать для определения структуры таблиц и хранения различных видов информации.

Целые числа:

INTEGER - 4-байтовое целое число.
SMALLINT - 2-байтовое целое число (маленькое целое).
BIGINT - 8-байтовое целое число (большое целое).
Вещественные числа:

REAL - 4-байтовое вещественное число с плавающей запятой.
DOUBLE PRECISION - 8-байтовое вещественное число с плавающей запятой.
Текстовые строки:

CHAR(n) - Фиксированная длина строки до n символов.
VARCHAR(n) - Строка переменной длины с максимальной длиной n символов.
TEXT - Строка переменной длины без ограничения длины.
Дата и время:

DATE - Дата (год, месяц, день).
TIME - Время (часы, минуты, секунды).
TIMESTAMP - Дата и время вместе.
INTERVAL - Интервал времени или даты.
Булев тип:

BOOLEAN - Логический тип данных (TRUE/FALSE).
Пример создания таблицы с использованием разных типов данных:

Пример ТАБЛИЦЫ CREATE( 
 идентификатор СЕРИЙНОГО ПЕРВИЧНОГО КЛЮЧА, 
 имя VARCHAR(50), 
 возраст INT, 
 дата рождения DATE, 
 is_active ЛОГИЧЕСКОЕ значение, 
 data JSONB 
);
Как создать базу данных
CREATE DATABASE имя_базы_данных;
Как создать и удалить таблицу в БД
создать ТАБЛИЦУ издателя
(
 publisher_id целое число ПЕРВИЧНЫЙ КЛЮЧ, 
 org_name varchar(128) НЕ NULL, 
 адрес текстовый НЕ NULL 
); 

СОЗДАТЬ ТАБЛИЦУ book
(
 book_id целое число ПЕРВИЧНЫЙ КЛЮЧ, 
 заголовок текста НЕ РАВЕН НУЛЮ, 
 isbn varchar(32) НЕ РАВЕН НУЛЮ 
); 

Издательство DROP TABLE; 
Книга DROP TABLE;
Отношение "один ко многим"
-- Создание таблицы Orders
CREATE TABLE publisher
(
	publisher_id integer PRIMARY KEY,
	org_name varchar(128) NOT NULL,
	address text NOT NULL
);

CREATE TABLE book
(
	book_id integer PRIMARY KEY,
	title text NOT NULL,
	isbn varchar(32) NOT NULL
);

INSERT INTO book
VALUES
(1, 'The Diary of a Young Girl', '0199535566'),
(2, 'Pride and Prejudice', '9780307594006'),
(3, 'To Kill a Mockingbird', '0446310786'),
(4, 'The Book of Gutsy Women: Favorite Stories of Courage and Resilience', '1501178415'),
(5, 'War and Peace', '1788886526');

INSERT INTO publisher
VALUES
(1, 'Everyman''s Library', 'NY'),
(2, 'Oxford University Press', 'NY'),
(3, 'Grand Central Publishing', 'Washington'),
(4, 'Simon & Schuster', 'Chicago');

SELECT * FROM publisher;

ALTER TABLE book
ADD COLUMN fk_publisher_id;

ALTER TABLE book
ADD CONSTRAINT fk_book_publisher
FOREIGN KEY(fk_publisher_id) REFERENCES publisher(publisher_id);
Отношение "один к одному" в теории
В отношении "один к одному" каждая запись в одной таблице связана с одной и только одной записью в другой таблице.

Отношение "один к одному" на практике
На практике отношение "один к одному"
Есть таблица person и таблица passport, где каждая запись в таблице person имеет связанную запись в таблице passport.

-- Создание таблицы person
СОЗДАТЬ ТАБЛИЦУ person
(
 person_id int ПЕРВИЧНЫЙ КЛЮЧ, 
 first_name varchar(64) НЕ NULL, 
 last_name varchar(64) НЕ NULL 
); 

СОЗДАТЬ ТАБЛИЦУ паспорта
(
 passport_id int ПЕРВИЧНЫЙ КЛЮЧ, 
 serial_number int NOT NULL, 
 fk_passport_person int УНИКАЛЬНЫЕ ССЫЛКИperson (person_id), 
 текст НЕ НУЛЕВОЙ 
); 

ВСТАВИТЬ В ЗНАЧЕНИЯ person (1, "Джон", "Сноу"); 
ВСТАВИТЬ В ЗНАЧЕНИЯ person (2, 'Нед, Старк); 
ВСТАВИТЬ В ЗНАЧЕНИЯ персоны (3, 'Роб', 'Баратеон"); 

ВСТАВИТЬ В паспорт ЗНАЧЕНИЯ (1, 123456, 1, 'Винтерфелл'); 
ВСТАВИТЬ В паспорт ЗНАЧЕНИЯ (2, 789012, 2, 'Винтерфелл'); 
ВСТАВИТЬ В паспорт ЗНАЧЕНИЯ (3, 345678, 3, "Король", "Посадка".;
Отношение "многие ко многим"
Отношение "многие ко многим" обычно связывает две другие таблицы.

-- Создание таблицы Authors
СОЗДАЕМ ТАБЛИЦУ Authors ( 
 author_id СЕРИЙНЫЙ ПЕРВИЧНЫЙ КЛЮЧ, 
 author_name VARCHAR(100) НЕ NULL 
); 

-- Создание таблицы Books
СОЗДАТЬ ТАБЛИЦУ Books ( 
 book_id СЕРИЙНЫЙ ПЕРВИЧНЫЙ КЛЮЧ, 
 book_title VARCHAR(200) НЕ NULL 
); 

-- Создание таблицы, связывающей книги и авторов
СОЗДАЕМ ТАБЛИЦУ BookAuthors ( 
 book_id INT, 
 author_id INT, 
 ПЕРВИЧНЫЙ КЛЮЧ (book_id, author_id), 
 ВНЕШНИЙ КЛЮЧ (book_id) ССЫЛКИна книги (book_id), 
 ВНЕШНИЙ КЛЮЧ (author_id) ССЫЛКИНА авторов (author_id) 
);
